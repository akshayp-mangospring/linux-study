`#!` - Shebang Operator. We need to add this operator at the top of every bash script, which is supposed to be followed by the path to our bash binary.
We have to add the Shebang operator to our bash script because we want to indicate which script are we writing, it could be a bash script or a Python script or even a program written in Go lang. So, adding the Shebang operator followed by a path to our bash binary tells that we are writing a bash script.

We can get the path to our bash by using `which $SHELL`.

A Bash script is just a bunch of command line commands but instead of doing them one by one we put them up in a `.sh` file and run it in one instance.

To run a shell script we can run `bash ./your_bash_script.sh`.
We can also run it directly without the `bash` command, but we need to modify the permissions of the file from just `read-write` to `read-write-execute`. We can do that by:
`chmod +x your_bash_script.sh` - This adds execution permissions to a file.
Then we can directly run the file like:
`./your_bash_script.sh`

Example o/p from terminal:
```
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ ls
hello_world.sh
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ ls -la
total 12
drwxrwxr-x 2 akshay-pawar akshay-pawar 4096 Jan 26 20:30 .
drwxrwxr-x 3 akshay-pawar akshay-pawar 4096 Jan 26 20:11 ..
-rw-rw-r-- 1 akshay-pawar akshay-pawar   33 Jan 26 19:23 hello_world.sh
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ chmod +x ./hello_world.sh
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ ls -la
total 12
drwxrwxr-x 2 akshay-pawar akshay-pawar 4096 Jan 26 20:30 .
drwxrwxr-x 3 akshay-pawar akshay-pawar 4096 Jan 26 20:11 ..
-rwxrwxr-x 1 akshay-pawar akshay-pawar   33 Jan 26 19:23 hello_world.sh
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ ./hello_world.sh
Hello, World!
akshay-pawar@akshay-pawar:~/linux-study/code/bash$
```
Thus we were successfully able to convert a non executable file to an executable file.

Delimiting Lines:
`;` can be used as a line delimiter in Bash scripts if you want to type out multiple commands just on one line.

For Example:
```
if [ $1 == 1 ]; then echo "It's first"; elif [ $1 == 2 ]; then echo "It's second"; else echo "It's last"; fi
```

Variables:
We can declare variables in a Shell script using the `UPPER_CASE_ONLY`.
Then we can use those variables with `$` prepended to it.
For example:
```
NAME="Akshay Pawar"
echo "Hello $NAME!"
```

Reading user input from Shell:
We can read user input from Shell using the `read` command.
For example:
```
echo "Enter your name:"
read NAME
echo "Hello $NAME!"
```

Output:
```
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ ./interactive.sh
Enter your first name:
Akshay
Enter your last name:
Pawar
Hello Akshay Pawar!
akshay-pawar@akshay-pawar:~/linux-study/code/bash$
```

Positional Arguments:
We can pass in args from the Shell itself separated by spaces when we are running a Shell script. These are called as Positional Arguments.
They always are named $1, $2, $3, $4... according to the position that it is passed in.

Piping in Bash:
You can pass in multiple commands separated by `|` - Pipes to the shell. Then these commands are run one by one by the bash in order that they were passed in.
Technically, the o/p of the first command before the `|` is sent as an argument to the next command after the `|`.

```
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ ls -l /usr/bin | grep 'bash'
-rwxr-xr-x 1 root   root      1183448 Apr 18  2022 bash
-rwxr-xr-x 1 root   root         6794 Apr 18  2022 bashbug
-rwxr-xr-x 1 root   root         2446 Jan 26  2020 dh_bash-completion
lrwxrwxrwx 1 root   root            4 Apr 18  2022 rbash -> bash
akshay-pawar@akshay-pawar:~/linux-study/code/bash$
```

Write to files from Shell:
We can write to a file from the Shell using `<` and `<<` operators.
< Operator- Override the contents of the file completely and write whatever is provided in the command.
<< Operator - Append the contents of the file with whatever is provided in the command. The appending is always done on a new line and not directly after the last character of the file.
Note that we have to use the `echo` command to pass on the text from the Shell to the intended file.

For example:
```
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ echo 'Hello, World!' > ./written_from_shell.txt
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ cat ./written_from_shell.txt
Hello, World!
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ echo 'Hello, World again!' >> ./written_from_shell.txt
akshay-pawar@akshay-pawar:~/linux-study/code/bash$ cat ./written_from_shell.txt
Hello, World!
Hello, World again!
akshay-pawar@akshay-pawar:~/linux-study/code/bash$
```

Expressions:
Expressions in Bash Script is put up between `[]` and is usually used in conditionals and variables.
For Example:
```
#!/bin/bash
# Expression's result is stored in a variable
IS_EQUAL=$(echo [ 1 == 21 ])

if $IS_EQUAL
then
  echo "It's equal"
else
  echo "It's not equal"
fi
```

Arithmetic Comparison Operators:
`-eq` - Equals To
`-lt` - Less Than
`-gt` - Greater Than

The above operators are generally used in expressions.
For Example:
`[ 10 -eq $1 ]`
Here we are trying to fing out whether the first positional argument entered by the user was `10` or not.

Parameter Expansion:
  - Brace Expansion
  - Filename Expansion
  - Globbing

Conditionals:
  If-Else Blocks:
    It's very similar to the `If-Else` statements in all the programming languages. Just the syntax for expressions and ending of a `If-Else` block is different.
    It ends with `fi`, and I don't know what it means as of now. Expressions are put up between `[]`, but you can also put up variables in place of expressions as I have done above in the notes.
  Switch statements:
    Well the syntax of switch statements is really something which needs to be wrapped my head around, but it's easy later on. Here the `|` operator is used like an 'OR' operator. `;;` is like the `break` statement. `esac` acts like the end of the switch statement.

    For Example:
    ```
    OWNER='Akshay'
    case $OWNER in
        'Akshay' | 'Bunty' | 'Saheb')
                echo "Hello, you're the Boss here. Welcome!"
                ;;

        'help')
                echo "Just tell your name, Duh!"
                ;;

        *)
                echo "You ain't gonna enter here. This is a place just for owners."
                ;;
    esac
    ```

Arrays:
We can create a list of things in Bash with the usage of normal variables. But they just needs to be initialized differently.
Arrays in Bash aren't created with `[]` because that's reserved for Expressions. We need to declare our list in a variable separated by spaces inside `()`.
Similar to other programming languages, arrays in Bash script are also based on zero index.
For Example:
```
MY_FIRST_LIST=(Heil mein Fuhrer!)
# This prints the first item in the list
echo ${MY_FIRST_LIST[0]}
# This prints the whole list
echo ${MY_FIRST_LIST[@]}
```

Looping:
Now that we can store items in a list. We can loop over them using a `for` loop. There are other loops in Bash as well, such as `while` loop, `until` loop. There are even advanced forms of `for` loops with ranges and stuff, but we'll study those later.
Just like we can break and continue in loops in other programming languages, we can do it over here too.

'For' Example:
```
NATIONS=(Bharat Deutschland Germany Russia Japan)

for nation in ${NATIONS[@]}; do
  if [ $nation == Germany ]; then
    continue
  fi
  echo $nation
done
```
Functions:

`awk` Command:

`sed` Command:

Scheduling scripts to run at specific times:
We can even schedule to run our scripts using the `at` command or the `crontab -e` file.
The `at` command is useful to run stuff just once at a specific time. But if we want to run stuff repeatedly at specific times then we have to use `crontab -e`.
When writing scripts intended for cron jobs, we should use commands using the full paths `/usr/bin/eho` instead of just `echo` becuase cron jobs aren't run in the shell environment.
But I'll study more on that later.
