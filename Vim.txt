Vi was a text editor created for the Unix OS. Vim Editor is an improvised version of the Vi editor(Vi IMproved) - VIM. It comes pre installed in Linux, Mac and all the remote SSH Linux servers, Kubernetes clients. Perhaps `emacs` or `nano` might not be installed but Vim is always installed on all Linux systems, even on the Cloud.
There's also a more advanced version on Vim available to everyone and it's called `Neovim`. I haven't checked that out yet. Will check it out later because I'm not sure that it's pre installed on all the SSH Linux Servers on the cloud nor on the Kubernetes clients. We can also integrate Vim on VSCode via some extensions.

Why learn Vim?
Because it's the only code editor available on the Cloud Servers. It's the default code editor. We don't have Nano, Cat, etc. on the servers, we get only Vim on remote Linux SSH servers and Kubernetes clients. That's why you shluld learn Vim.
Devs also claim that it leterally increases your productivity, because we never have to touch our mouse or move our hand out that much. It helps us move around the file faster.
Vim also helps us read files with `man` or `less` or `tail` very quickly. So learning the knowledge of Vim is transferable to other terminal based editors as well.

Type in `vimtutor` on the terminal to get all the help related to Vim.

To open up any file in Vim, just type:
`vim path_to_your_file`

Vim editor opens up in Command mode by default. You can switch quickly between Insert mode and Command mode by pressing `i` or `a` for Insert mode and `Esc` to switch back to Command mode.
Whenever we start editing a file in Vim editor a temporary file with the `.swp` extension gets created in the same directory in which the file resides. That file is useful to keep track to avoid multiple terminals making edits in the same file. So that helps avoid conflicting changes in the file.

For example:
If I am editing `primes.go` in the current directory, then a `primes.go.swp` temp file will get created in the current working directory as the editing of the file is taking place. Now if we try to edit the same file from another terminal window/tab then we will get a prompt saying that anotehr terminal is editing the same file. As we exit the Vim editor that temp file will get deleted.

Modes of Vim:
  Command Mode - Default mode:
    In this mode we can operate on the already existing content of the file.
  Insert Mode:
    This mode is specifically to add new contents in a file.
  Visual Mode:
    You actually enter selection mode. In it, you can actually see the selection to operate upon.
    This mode is useful for visually seeing the selections being made in the file upon which the operations will be performed.
    It operates upon lines.

Whenever we hit Esc key we get switched back to the default Command mode of the Vim editor from any mode like Insert or Visual.

Modes to operate in Vim:
  To Save - :w
  To Save and Quit - :wq
  To quit without saving - :q!
  To enter Insert mode - i or a
  To exit Insert mode - Esc
  To enter Visual Mode - V
  To Show line numbers - :set number

Keys to navigate:
  In Command mode:
    Up - k
    Down - j
    Left - h
    Right - l
    On the keyboard layout:
      hjkl - Left Bottom Up Right (LBUR)

    Move to the bottom of the file - G
    Move to the top of the file - gg
    Undo - u
    Redo - Ctrl + r
    Delete a character - x
    Replace a character - r
    Copy Selection - y
    Cut a line - dd
    Copy a line - yy
    Paste a line - p
    Move the cursor up a block of code - {
    Move the cursor down a block of code - }
    Move the cursor # of times in the code:
      10 lines down - 10j
      10 lines up - 10k
      10 places left - 10h
      10 places right - 10l
    Add a new line below and switch to Insert mode - o
    Add a new line above and switch to Insert mode - O
    Move cursor to the next word - w
    Move cursor to the previous word - b
    Go to line - :line_number
    Go to the beginning of the line - 0
    Go to the first word of the line - 0w
    Go to the first desired letter in the line - f(desired letter)
      Example: Go to first `!` with `f!`
    Change a word and switch to insert mode - cw
    Delete a word and switch to insert mode - dw
    Delete everything until the end of the line - D
    Delete everything until the end of the line and switch to insert mode - C
    Delete everything until a specific letter of the line and switch to insert mode - ct(desired letter)
    Delete everything until a specific letter in a line - dt(desired letter)

    Find all instances of a function or variable - *
      It's similar to Ctrl + d in VSCode.
    Toggle the case of a character - ~
    Rerun the previous command - . => Super Important

  In Insert mode:
    Up - Up arrow
    Down - Down arrow
    Left - Left arrow
    Right - Right arrow

  In Visual Mode:
    Delete the selected lines - d

The Coolest thing about Vim is that we can actually use combos of commands with a number to execute the command that many times. It comes along with that many times

Macros in Vim => Revolutionary!!!
It's not possible in any other editor that I know about.
It allows us to replay a bunch of commands in the editor. We can record macros with the help of `@` and the key in which the macro will be saved to.
So, `@w` will save the macro to `@w` key combo. So, when we hit `@w` then all the keystrokes which were saved to the macro will be fired.

The classic use case is to get all of my PRs from Github and remove the extra " and , from the editor and give us the bunch of PRs in a list format.

Unresolved questions:
Usage of %
Search in file
