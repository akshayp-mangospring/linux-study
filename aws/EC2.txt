It's the most popular and the most important AWS offering.

EC2 stands for Elastic Compute Cloud. It is AWS's Infrastructure as a Service.
It mainly consists of:
Renting Virtual Machines - EC2
Storing data on virtual drives - Elastic Block Store - EBS
Distributing the load across machines - Elastic Load Balancing - ELB
Auto Scaling the services using an Auto Service Group - ASG

Knowing EC2 is the most important step in learning how AWS works or the Cloud works in general.

When we are configuring the EC2 instance, we need to decide upon:
  Which OS to choose - Either Linux, MacOS or Windows
  How much compute power - Cores
  How much memory - RAM
  How much storage space:
    Network attached - EBS & Elastic File System - EFS
    Hardware - EC2 instance store
  Public IP, Private IPs
  Security Groups - Firewalls
  Bootstrap script - Configure the first launch - EC2 User Data

  The above is just like buying a laptop - We choose the OS, CPU, RAM, Hard Drive. We just have a few extra things over here such as Network, Firewall and Bootup script.

EC2 User Data:
  Bootstrap means launching commands when a machine starts. It's possible to bootstrap our EC2 instances using EC2 User Data Scripts. It runs once when the system is booted.
  EC2 User data is used to automate the boot tasks such as:
    Installing updates
    Installing software
    Downloading common files from the internet, etc.

  Boot scripts run only with the root user. So, it'll require to be run as `sudo` from the SSH shell.

EC2 Instance Types:
Some of the instances are as follows:
```
t2.xlarge - 4 Cores, 16GB RAM
c5d.4xlarge - 16 Cores, 32GB RAM
m5.8xlarge - 32 Cores, 128GB RAM
r5.16xlarge - 64 Cores, 512GB RAM - Highest possible.
```
`t2.micro` instance - 750 hours/month is sufficient for the training, which has got 1 CPU core & 1GB RAM. It's storage is on the Elastic Block store. 30 GB of EBS is included in the Free Tier.

Launching an EC2 instance:
My first instance details:
Name: My First Instance
OS: Amazon Linux 2023 AMI
Architecture: 64bit-x86
Instance Type: t2.micro

Created a new Key Pair for SSH login into the instance. Downloaded it as well.
I've allowed logging in via SSH into my EC2 instance from anywhere.
Created a User Data Script to launch it, it's written in bash as follows:
```
#!/bin/bash
# Use this for your user data (script from top to bottom)
# install httpd (Linux 2 version)
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "<h1>Hello, World from my first EC2 Instance - $(hostname -f)</h1>" > /var/www/index.html
```

Here we can now view our Webpage via `index.html` that was just created via our script above.

There are different types of instances in EC2:
  General Purpose:
    It has a balance of Memory, Compute and Networking resources. It's ideal for resources in equal proportions, such as web servers and code.
    Such instances come under the `t` classes of instances.
  Compute Optimized:
    It is compute resources optimized. It's used for compute intensive tasks that require high performance processors.
    It's used for batch processing workloads, also used for media transcoding like converting images or videos into multiple sizes or compressing them.
    Game servers, Machine Learning, High performance web servers.
    Such instances come under the `c` classes of instances.
  Memory Optimized:
    It is memory optimized. Fast performance for workloads which Pprocess large datasets in memory.
    High performance SQL, NoSQL queries.
    Distributed Web Caches.
    Business Intelligence and Real Time processing of big unstructured data.
    Such instances come under the `r`, `x`, `z` classes of instances.
  Storage Optimized:
    It is storage optimized. Great for storage intensive tasks, that require high sequential, read and write access to data sets on local storage.
    High frequency Online Transaction Processing Systems(OLTP)
    Relational & NoSQL databases
    Cache for in-memory databases(Redis, Memcached)
    Data warehousing
    Distributed file systems
    Such instances come under the `i`, `d`, `h` classes of instances.
  Accelerated Computing:

Naming conventions of EC2 instances:
  Suppose `m5.2xlarge` is the name of the instance. Then,
  `m` is the instance class
  `5` is the generation of the instance
  `2xlarge` is the size of the instance class

Security Groups in EC2:
  These security groups are basically firewalls around our EC2 instances. This is a fundamental building block of our AWS Networking security.
  It controls how traffic is allowed into and out of our EC2 instances. It wraps our EC2 instance. EC2 instance won't even be notified of the traffic that is blocked by the security group.
  Security groups have got only `allow` rules inside them.
  It can reference by IP address or by Security Group.
  It's a good practice to maintain one security group for SSH access.

  Security groups regulate:
  Access to ports of our instance
  Authorized IP Ranges to access our instance
  It controls Inbound - From internet to the instance and Outbound - From instance to the internet, traffic of the instance

  Rules of Security Groups:
  One Security group can be attached to multiple instances. An instance can have multiple Security Groups too.
  Security Groups are locked down to a region or VPC combination.
  By default all inbound traffic is blocked.
  By default all outbound traffic is allowed.
  When we get a `Connection refused` error then the traffic went through the security group and hit the instance.
  When the Security group blocks access to an instance then we always get a `Connection Timed Out` error.
  We can reference one Security Group from another Security Group as well.

  Ports to remember for Security Groups:
  22 - SSH - To log into an instance via Secure Shell.
  21 - FTP - To upload files to the instance
  22 - SFTP - To securely upload files using SSH to the instance.
  80 - HTTP - Access unsecured websites.
  443 - HTTPS - Access secured websites.
  3389 - RDP(Remote Desktop Protocol) - A Windows only alternative instance port to log into an instance like SSH.

Spot Instances & Spot Fleet:

EC2 Hibernate:
